#!/usr/bin/env python2


# adb-tether is released under the MIT License!
# You may "use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software" as long as your also publish this LICENSE file with it!
# Tetherbot binary is directly from http://graha.ms/androidproxy/Tetherbot.apk
# MD5:    a5ad2b1280df621335977eab0f0dc3d5  Tetherbot.apk
# SHA1:   c09e547a4906afa92bf0fc857d4ea11abcda87a0  Tetherbot.apk
# SHA256: 5a8913f4d1b43570d356be971b47e850af040106308df9a51bf209dbd5ed7476  Tetherbot.apk
# Thanks for using Free Libre Open Source Software!
#
#                  _   _
#   __ _  ___ _ __| |_| |__
#  / _` |/ _ \ '__| __| '_ \
# | (_| |  __/ |  | |_| | | |
#  \__,_|\___|_|   \__|_| |_|
#
#
# The MIT License (MIT)
#
# Copyright (c) 2015 ADB-TETHER TEAM
#
# aerth@isupon.us
# yourname@here
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


from os import system
import curses, sys, traceback, os

MIN_SCR_W = 80          # Minimum screen width
MIN_SCR_H = 25          # Minimum screen height

def main():
    try:
        def get_param(prompt_string):
             screen.clear()
             screen.border(0)
             screen.addstr(2, 2, prompt_string)
             screen.refresh()
             screen.addstr(1,2, "adb-tether v0.3", curses.A_STANDOUT)
             input = screen.getstr(10, 10, 600)
             return input


        def get_params(prompt_string,second_string):
             screen.clear()
             screen.border(0)
             screen.addstr(2, 10, prompt_string)
             screen.addstr(4, 10, second_string)
             screen.refresh()
             screen.addstr(1,2, "adb-tether v0.3", curses.A_STANDOUT)
             input = screen.getstr(10, 10, 60)
             return input


        def execute_cmd(cmd_string):
             system("reset")
             a = system( cmd_string )

             if a == 0:
                  print "Command executed correctly"

             else:
                  print "Command terminated with error"
             raw_input("Press enter")

        def launch_cmd(cmd_string):
             system("reset")
             a = system( cmd_string )
             print ""
             if a == 0:
                  print "Command executed correctly"

             else:
                  print "Command terminated with error"
             raw_input("Press enter")
        x = 0
        while x != ord('q'):

             #system("reset")

             screen = curses.initscr()
             SCREEN_HEIGHT, SCREEN_WIDTH = screen.getmaxyx()

             if (SCREEN_HEIGHT < MIN_SCR_H) or (SCREEN_WIDTH < MIN_SCR_W):
               os.system('reset')
               sys.exit("\nSorry, the screen must be at least %dx%d!\n\n" % (MIN_SCR_W, MIN_SCR_H))

             #sys.exit("Done")
             #os.system('reset')
             #screen.clear()
             screen.border(0)
             curses.start_color()
             curses.init_pair(1,curses.COLOR_RED, curses.COLOR_BLACK)
             curses.init_pair(2,curses.COLOR_GREEN, curses.COLOR_BLACK)
             curses.init_pair(3,curses.COLOR_BLACK, curses.COLOR_GREEN)
             curses.init_pair(4,curses.COLOR_BLUE, curses.COLOR_BLACK)
             curses.init_pair(5,curses.COLOR_BLACK, curses.COLOR_BLACK)
             screen.bkgd(' ', curses.color_pair(4))
             pos = 2
             curses.cbreak()
             curses.noecho()
             screen.keypad(0)

             screen.refresh()
             screen.addstr(1,2, "adb-tether v0.3", curses.color_pair(3))

             screen.addstr(2,2, "Update at https://github.com/aerth/adb-tether", curses.A_BOLD)
             screen.addstr(4,2, "Tetherbot is from http://graha.ms/androidproxy/Tetherbot.apk", curses.A_BOLD)
             screen.addstr(6,60, "THANKS GRAHA.MS!", curses.color_pair(1))

             screen.addstr(6, 2, "1 - Install Dependencies [using sudo apt-get]")
             screen.addstr(7, 2, "    >> android-tools-adb android-tools-fastboot ")
             screen.addstr(8,2, "    >> android-tools-utils gvfs-backends jmtpfs")


             screen.addstr(10, 2, "2 - USB ADB START")
             screen.addstr(11, 2, "3 - USB ADB STATUS")
             screen.addstr(12, 2, "4 - KILL ADB SRV")
             screen.addstr(13, 2, "5 - Connected Androids", curses.color_pair(2))
             screen.addstr(14, 2, "6 - Connect Android via adb")
             screen.addstr(15, 2, "7 - ENABLE USB TETHER (port 1080 SOCKS)", curses.color_pair(2))

             screen.addstr(16, 2, "8 - ENABLE SSH PROXY")
             screen.addstr(17, 2, "9 - SSH to Server")
             screen.addstr(18, 2, "0 - SSH to Server (with id_rsa)")
             screen.addstr(19, 2, "a - SCP Push (with id_rsa)")
             screen.addstr(18, 2, "b - SCP Get (with id_rsa)")
             screen.addstr(24, 2, "Thanks for using Free / Libre Open Source Software!", curses.A_BOLD)
             screen.keypad(1)
             screen.addstr(2, 50, "Press q or CTRL + C to Exit", curses.color_pair(4))
             screen.addstr(3, 40, "", curses.color_pair(5))
             s = curses.newwin(1, 15, 2, 8)
             s.box()


             x = screen.getch()

             if x == ord('1'):
                  confirm = get_params("Downloading and installing dependencies!","Are you sure? \n        type yes")
                  curses.endwin()
                  if confirm == "yes":
                       execute_cmd("sudo apt-get install android-tools-adb android-tools-fastboot android-tools-utils gvfs-backends jmtpfs")

             if x == ord('2'):
                  curses.endwin()
                  execute_cmd("adb start-server")
                  execute_cmd("echo Now connect your android via USB. Make sure its in debugging mode. Run command #5 to see if it is properly connected.")
             if x == ord('3'):
                  curses.endwin()
                  execute_cmd("adb get-state")
             if x == ord('4'):
                  iface = get_param("are you sure? stopping adb server!")
                  curses.endwin()
                  if confirm == "yes":
                        execute_cmd("adb kill-server")
             if x == ord('5'):
                  curses.endwin()
                  execute_cmd("adb devices -l")
             if x == ord('6'):
                  curses.endwin()
                  execute_cmd("adb shell su")
             if x == ord('7'):
                  user = get_param("At this point you must pick up your phone open Tetherbot app and Start Socks.")
                  curses.endwin()
                  execute_cmd("adb forward tcp:1080 tcp:1080")
             if x == ord('8'):
                  user = get_param("At this point you must pick up your phone open Tetherbot app and Start Tunnel to your favorite server.")
                  curses.endwin()

                  execute_cmd("adb forward tcp:4444 localabstract:Tunnel")
             if x == ord('9'):
                  curses.endwin()
                  user = get_param("What username to ssh?")
                  execute_cmd("ssh -p 4444 " + user + "@localhost")
             if x == ord('0'):
                  user = get_param("What username to ssh?")
                  curses.endwin()
                  execute_cmd("ssh -p 4444 " + user + "@localhost -v -i ~/.ssh/id_rsa")
             if x == ord('a'):
                  user = get_param("What username to ssh?")
                  files = get_param("What files to push?")
                  curses.endwin()
                  execute_cmd("scp -v -i ~/.ssh/id_rsa -P 4444 " + files + " " + user + "@localhost:~/ ")

             if x == ord('b'):
                  user = get_param("What username to ssh?")
                  files = get_param("What files to get?")
                  curses.endwin()
                  execute_cmd("scp -v -i ~/.ssh/id_rsa -P 4444 " + user + "@localhost:~/" + files + " . ")


        curses.endwin()
    except KeyboardInterrupt:
        print "\n Have a Grateful Day! :D \n"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    os.system('reset')


if __name__ == "__main__":
    main()
